[
  {
    "comments": [
      {
        "line": 1,
        "value": "# order: 0"
      }
    ],
    "line": 2,
    "elements": [
      {
        "line": 11,
        "name": "Convert features test output into documentation",
        "description": "",
        "id": "cukedoctor-converter;convert-features-test-output-into-documentation",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2261533,
              "status": "passed"
            },
            "line": 13,
            "name": "The following two features:",
            "match": {
              "location": "OrderingSteps.the_following_two_features(String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "content_type": "",
              "line": 14,
              "value": "Feature: Feature1\n\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\nFeature: Feature2\n\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 11460609,
              "status": "passed"
            },
            "comments": [
              {
                "line": 27,
                "value": "# cukedoctor-discrete"
              }
            ],
            "line": 28,
            "name": "I convert their json test output using cukedoctor converter",
            "match": {
              "location": "ConverterSteps.I_convert_their_json_output_report_using_cukedoctor_converter(String)"
            },
            "keyword": "When ",
            "doc_string": {
              "content_type": "",
              "line": 29,
              "value": "[IMPORTANT]\n\u003d\u003d\u003d\u003d\u003d\u003d\nTo generate cucumber .json output files just execute your _BDD_ tests with *json* formatter, example:\n\n[source,java]\n----\n@RunWith(Cucumber.class)\n@CucumberOptions(plugin \u003d {\"json:target/cucumber.json\"} )\n----\nNOTE: *plugin* option replaced *format* option which was deprecated in newer cucumber versions.\n\n\u003d\u003d\u003d\u003d\u003d\u003d"
            }
          },
          {
            "result": {
              "duration": 257423,
              "status": "passed"
            },
            "comments": [
              {
                "line": 44,
                "value": "# cukedoctor-discrete"
              }
            ],
            "line": 45,
            "name": "I should have awesome living documentation",
            "match": {
              "location": "ConverterSteps.I_should_have_awesome_living_documentation(String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "",
              "line": 46,
              "value": "\n\u003d *Documentation*\n\n\n\n\u003d\u003d *Summary*\n[cols\u003d\"12*^m\", options\u003d\"header,footer\"]\n|\u003d\u003d\u003d\n3+|Scenarios 7+|Steps 2+|Features: 2\n\n|[green]#*Passed*#\n|[red]#*Failed*#\n|Total\n|[green]#*Passed*#\n|[red]#*Failed*#\n|[purple]#*Skipped*#\n|[maroon]#*Pending*#\n|[yellow]#*Undefined*#\n|[blue]#*Missing*#\n|Total\n|Duration\n|Status\n\n12+^|*\u003c\u003cFeature1\u003e\u003e*\n|1\n|0\n|1\n|1\n|0\n|0\n|0\n|0\n|0\n|1\n|647ms\n|[green]#*passed*#\n\n12+^|*\u003c\u003cFeature2\u003e\u003e*\n|1\n|0\n|1\n|1\n|0\n|0\n|0\n|0\n|0\n|1\n|000ms\n|[green]#*passed*#\n12+^|*Totals*\n|2|0|2|2|0|0|0|0|0|2 2+|647ms\n|\u003d\u003d\u003d\n\n\u003d\u003d *Features*\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n\n****\nGiven ::\n\u003d\u003d\u003d\u003d\u003d\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(647ms)#\n\u003d\u003d\u003d\u003d\u003d\n****\n\n[[Feature2, Feature2]]\n\u003d\u003d\u003d *Feature2*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n\n****\nGiven ::\n\u003d\u003d\u003d\u003d\u003d\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\n****\n\n"
            }
          }
        ]
      }
    ],
    "name": "Cukedoctor Converter",
    "description": "\u003d\u003d\u003d\u003d\n[quote]\n____\nIn order to have awesome _living documentation_\nAs a bdd developer\nI want to use *Cukedoctor* to convert my cucumber test results into `readable` living documentation.\n____\n\u003d\u003d\u003d\u003d",
    "id": "cukedoctor-converter",
    "keyword": "Feature",
    "uri": "com/github/cukedoctor/bdd/cukedoctor/converter.feature"
  },
  {
    "comments": [
      {
        "line": 1,
        "value": "# order: 2"
      }
    ],
    "line": 2,
    "elements": [
      {
        "line": 11,
        "name": "DocSting enrichment",
        "description": "Asciidoc markup can be used in feature *DocStrings*. To do so you need to enable it by using *[cukector-dicrete]* comment on the feature.",
        "id": "enrich-features;docsting-enrichment",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 75604,
              "status": "passed"
            },
            "line": 14,
            "name": "The following two features:",
            "match": {
              "location": "OrderingSteps.the_following_two_features(String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "content_type": "",
              "line": 15,
              "value": "Feature: Enrich feature\n\n  Scenario: Render source code\n\n    # cukedoctor-discrete\n    Given the following source code in docstrings\n\"\"\"\n  [source, java]\n  -----\n  public int sum(int x, int y){\n  int result \u003d x + y;\n  return result; (1)\n  }\n  -----\n  \u003c1\u003e We can have callouts in living documentation\n\"\"\"\n\n  Scenario: Render table\n\n    # cukedoctor-discrete\n    Given the following table\n \"\"\"\n  |\u003d\u003d\u003d\n\n  | Cell in column 1, row 1 | Cell in column 2, row 1\n  | Cell in column 1, row 2 | Cell in column 2, row 2\n  | Cell in column 1, row 3 | Cell in column 2, row 3\n\n  |\u003d\u003d\u003d\n\"\"\""
            }
          },
          {
            "result": {
              "duration": 8607071,
              "status": "passed"
            },
            "line": 48,
            "name": "I convert docstring enriched json output using cukedoctor converter",
            "match": {
              "location": "EnrichmentSteps.I_convert_docstring_enriched_json_output_using_cukedoctor_converter()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 137873,
              "status": "passed"
            },
            "comments": [
              {
                "line": 50,
                "value": "# cukedoctor-discrete"
              }
            ],
            "line": 51,
            "name": "DocString asciidoc output must be rendered in my documentation",
            "match": {
              "location": "EnrichmentSteps.DocString_asciidoc_output_must_be_rendered_in_my_documentation(String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "",
              "line": 52,
              "value": "[[Discrete-class-feature, Discrete class feature]]\n\u003d\u003d\u003d *Discrete class feature*\n\n\u003d\u003d\u003d\u003d Scenario: Render source code\n\n****\nGiven ::\n\u003d\u003d\u003d\u003d\u003d\nthe following source code icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(267ms)#\n******\n\n[discrete]\n[source, java]\n-----\npublic int sum(int x, int y){\n    int result \u003d x + y;\n    return result; \u003c1\u003e\n}\n-----\n\u003c1\u003e We can have callouts in living documentation\u003e\n\n\n******\n\n\u003d\u003d\u003d\u003d\u003d\n****\n\n\u003d\u003d\u003d\u003d Scenario: Render table\n\n****\nGiven ::\n\u003d\u003d\u003d\u003d\u003d\nthe following table icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n******\n\n[discrete]\n|\u003d\u003d\u003d\n| Cell in column 1, row 1 | Cell in column 2, row 1\n| Cell in column 1, row 2 | Cell in column 2, row 2\n| Cell in column 1, row 3 | Cell in column 2, row 3\n|\u003d\u003d\u003d\n\n\n******\n\n\u003d\u003d\u003d\u003d\u003d\n****\n\n"
            }
          }
        ]
      },
      {
        "line": 104,
        "name": "Comments enrichment",
        "description": "Asciidoc markup can be used in feature comments. To do so you need to surround asciidoc markup by *curly brackets*;.",
        "id": "enrich-features;comments-enrichment",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 71433,
              "status": "passed"
            },
            "line": 107,
            "name": "The following feature with asciidoc markup in comments:",
            "match": {
              "location": "EnrichmentSteps.The_following_feature_with_asciidoc_markup_in_comments(String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "content_type": "",
              "line": 108,
              "value": "Feature: Calculator\n\n  Scenario: Adding numbers\n   You can *asciidoc markup* in _feature_ #description#.\n\n    NOTE: This is a very important feature!\n\n    #{IMPORTANT: Asciidoc markup inside *steps* must be surrounded by *curly brackets*.}\n    Given I have numbers 1 and 2\n\n    # {NOTE: Steps comments are placed *before* each steps so this comment is for the *WHEN* step.}\n\n    When I sum the numbers\n    # {* this is a list of itens inside a feature step}\n    # {* there is no multiline comment in gherkin}\n    # {** second level list item}\n    Then I should have 3 as result\n"
            }
          },
          {
            "result": {
              "duration": 8293238,
              "status": "passed"
            },
            "line": 129,
            "name": "I convert enriched feature json output using cukedoctor",
            "match": {
              "location": "EnrichmentSteps.I_convert_enriched_feature_json_output_using_cukedoctor()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 184548,
              "status": "passed"
            },
            "comments": [
              {
                "line": 131,
                "value": "# cukedoctor-discrete"
              }
            ],
            "line": 132,
            "name": "Asciidoc markup on comments must be rendered in my documentation",
            "match": {
              "location": "EnrichmentSteps.Asciidoc_output_must_be_rendered_in_my_documentation(String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "",
              "line": 133,
              "value": "[[Calculator, Calculator]]\n\u003d\u003d\u003d *Calculator*\n\n\u003d\u003d\u003d\u003d Scenario: Adding numbers\nYou can use *asciidoc markup* in _feature_ #description#.\n\nNOTE: This is a very important feature!\n\n****\nGiven ::\n\u003d\u003d\u003d\u003d\u003d\nI have numbers 1 and 2 icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(114ms)#\n\nIMPORTANT: Asciidoc markup inside *steps* must be surrounded by *curly brackets*.\n\n\u003d\u003d\u003d\u003d\u003d\nWhen ::\n\u003d\u003d\u003d\u003d\u003d\nI sum the numbers icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\nNOTE: Steps comments are placed *before* each steps so this comment is for the *WHEN* step.\n\n\u003d\u003d\u003d\u003d\u003d\nThen ::\n\u003d\u003d\u003d\u003d\u003d\nI should have 3 as result icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(001ms)#\n\n* this is a list of itens inside a feature step\n\n* there is no multiline comment in gherkin\n\n** second level list item\n\n\u003d\u003d\u003d\u003d\u003d\n****\n\n"
            }
          }
        ]
      }
    ],
    "name": "Enrich features",
    "description": "\u003d\u003d\u003d\u003d\n[quote]\n____\nIn order to have awesome _living documentation_\nAs a bdd developer\nI want to render asciidoc markup inside my features.\n____\n\u003d\u003d\u003d\u003d",
    "id": "enrich-features",
    "keyword": "Feature",
    "uri": "com/github/cukedoctor/bdd/cukedoctor/enrichment.feature"
  },
  {
    "comments": [
      {
        "line": 1,
        "value": "# order: 3"
      }
    ],
    "line": 2,
    "elements": [
      {
        "line": 11,
        "name": "Introduction chapter in classpath",
        "description": "",
        "id": "documentation-introduction-chapter;introduction-chapter-in-classpath",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 67815,
              "status": "passed"
            },
            "line": 13,
            "name": "The following two features:",
            "match": {
              "location": "OrderingSteps.the_following_two_features(String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "content_type": "",
              "line": 14,
              "value": "Feature: Feature1\n\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\nFeature: Feature2\n\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 9857491,
              "status": "passed"
            },
            "comments": [
              {
                "line": 28,
                "value": "#{NOTE: The introduction file must be named *intro-chapter.adoc* and can be in any package of your application,}"
              },
              {
                "line": 30,
                "value": "#{[TIP]}"
              },
              {
                "line": 31,
                "value": "#{\u003d\u003d\u003d\u003d}"
              },
              {
                "line": 32,
                "value": "#{By default Cukedoctor will look into application folders but you can make Cukedoctor look into external folder by setting the following system property:}"
              },
              {
                "line": 33,
                "value": "#{[source,java]}"
              },
              {
                "line": 34,
                "value": "#{----}"
              },
              {
                "line": 35,
                "value": "#{System.setProperty(\"INTRO_CHAPTER_DIR\",\"/home/some/external/folder\");}"
              },
              {
                "line": 36,
                "value": "#{----}"
              },
              {
                "line": 37,
                "value": "#{\u003d\u003d\u003d\u003d}"
              },
              {
                "line": 39,
                "value": "#cukedoctor-discrete"
              }
            ],
            "line": 40,
            "name": "The following asciidoc document is on your application classpath",
            "match": {
              "location": "IntroChapterSteps.I_convert_their_json_output_report_using_cukedoctor_converter(String)"
            },
            "keyword": "And ",
            "doc_string": {
              "content_type": "",
              "line": 41,
              "value": "\u003d *Introduction*\n\nCukedoctor is a *Living documentation* tool which integrates Cucumber and Asciidoctor in order to convert your _BDD_ tests results into an awesome documentation.\n\nHere are some design principles:\n\n* Living documentation should be readable and highlight your software features;\n** Most bdd tools generate reports and not a truly documentation.\n* Cukedoctor *do not* introduce a new API that you need to learn, instead it operates on top of http://www.relishapp.com/cucumber/cucumber/docs/formatters/json-output-formatter[cucumber json output^] files;\n** In the \u0027worst case\u0027 to \u003c\u003cEnrich-features,enhance\u003e\u003e your documentation you will need to know a bit of http://asciidoctor.org/docs/what-is-asciidoc/[asciidoc markup^]."
            }
          },
          {
            "result": {
              "duration": 24175,
              "status": "passed"
            },
            "line": 54,
            "name": "Bdd tests results are converted into documentation by Cukedoctor",
            "match": {
              "location": "IntroChapterSteps.Bdd_tests_results_are_converted_into_documentation_by_Cukedoctor()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 345809,
              "status": "passed"
            },
            "comments": [
              {
                "line": 57,
                "value": "# cukedoctor-discrete"
              }
            ],
            "line": 58,
            "name": "Resulting documentation should have the provided introduction chapter",
            "match": {
              "location": "IntroChapterSteps.I_should_have_awesome_living_documentation(String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "",
              "line": 59,
              "value": "\n\u003d *Documentation*\n\n\u003d\u003d *Introduction*\n\nCukedoctor is a *Living documentation* tool which integrates Cucumber and Asciidoctor in order to convert your _BDD_ tests results into an awesome documentation.\n\nHere are some design principles:\n\n* Living documentation should be readable and highlight your software features;\n** Most bdd tools generate reports and not a truly documentation.\n* Cukedoctor *do not* introduce a new API that you need to learn, instead it operates on top of http://www.relishapp.com/cucumber/cucumber/docs/formatters/json-output-formatter[cucumber json output^] files;\n** In the \u0027worst case\u0027 to \u003c\u003cEnrich-features,enhance\u003e\u003e your documentation you will need to know a bit of http://asciidoctor.org/docs/what-is-asciidoc/[asciidoc markup^].\n\n\u003d\u003d *Summary*\n[cols\u003d\"12*^m\", options\u003d\"header,footer\"]\n|\u003d\u003d\u003d\n3+|Scenarios 7+|Steps 2+|Features: 2\n\n|[green]#*Passed*#\n|[red]#*Failed*#\n|Total\n|[green]#*Passed*#\n|[red]#*Failed*#\n|[purple]#*Skipped*#\n|[maroon]#*Pending*#\n|[yellow]#*Undefined*#\n|[blue]#*Missing*#\n|Total\n|Duration\n|Status\n\n12+^|*\u003c\u003cFeature1\u003e\u003e*\n|1\n|0\n|1\n|1\n|0\n|0\n|0\n|0\n|0\n|1\n|647ms\n|[green]#*passed*#\n\n12+^|*\u003c\u003cFeature2\u003e\u003e*\n|1\n|0\n|1\n|1\n|0\n|0\n|0\n|0\n|0\n|1\n|000ms\n|[green]#*passed*#\n12+^|*Totals*\n|2|0|2|2|0|0|0|0|0|2 2+|647ms\n|\u003d\u003d\u003d\n\n\u003d\u003d *Features*\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n\n****\nGiven ::\n\u003d\u003d\u003d\u003d\u003d\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(647ms)#\n\u003d\u003d\u003d\u003d\u003d\n****\n\n[[Feature2, Feature2]]\n\u003d\u003d\u003d *Feature2*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n\n****\nGiven ::\n\u003d\u003d\u003d\u003d\u003d\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\n****\n\n"
            }
          }
        ]
      }
    ],
    "name": "Documentation introduction chapter",
    "description": "\u003d\u003d\u003d\u003d\n[quote]\n____\nIn order to have an introduction chapter in my documentation\nAs a bdd developer\nI want to be able to provide an asciidoc based document which introduces my software.\n____\n\u003d\u003d\u003d\u003d",
    "id": "documentation-introduction-chapter",
    "keyword": "Feature",
    "uri": "com/github/cukedoctor/bdd/cukedoctor/intro-chapter.feature"
  },
  {
    "comments": [
      {
        "line": 1,
        "value": "# order: 1"
      }
    ],
    "line": 2,
    "elements": [
      {
        "line": 12,
        "name": "Default ordering",
        "description": "",
        "id": "ordering;default-ordering",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 73882,
              "status": "passed"
            },
            "line": 14,
            "name": "The following two features:",
            "match": {
              "location": "OrderingSteps.the_following_two_features(String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "content_type": "",
              "line": 15,
              "value": "Feature: Feature1\n\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\nFeature: Feature2\n\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 8399886,
              "status": "passed"
            },
            "line": 28,
            "name": "I convert them using default order",
            "match": {
              "location": "OrderingSteps.I_convert_the_using_default_order()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 123097,
              "status": "passed"
            },
            "comments": [
              {
                "line": 30,
                "value": "# cukedoctor-discrete"
              }
            ],
            "line": 31,
            "name": "Features should be ordered by name in resulting documentation",
            "match": {
              "location": "OrderingSteps.Features_should_be_ordered_by_name_in_resulting_documentation(String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "",
              "line": 32,
              "value": "[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n\n****\nGiven ::\n\u003d\u003d\u003d\u003d\u003d\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(647ms)#\n\u003d\u003d\u003d\u003d\u003d\n****\n\n[[Feature2, Feature2]]\n\u003d\u003d\u003d *Feature2*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n\n****\nGiven ::\n\u003d\u003d\u003d\u003d\u003d\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\n****\n\n"
            }
          }
        ]
      },
      {
        "line": 60,
        "name": "Custom ordering",
        "description": "",
        "id": "ordering;custom-ordering",
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 88709,
              "status": "passed"
            },
            "comments": [
              {
                "line": 62,
                "value": "#{NOTE: Ordering is done using feature comment \u0027*#order:*\u0027}"
              }
            ],
            "line": 63,
            "name": "The following two features:",
            "match": {
              "location": "OrderingSteps.the_following_two_features(String)"
            },
            "keyword": "Given ",
            "doc_string": {
              "content_type": "",
              "line": 64,
              "value": "#order: 2\nFeature: Feature1\n\n  Scenario: Scenario feature 1\n\n    Given scenario step\n\n#order: 1\nFeature: Feature2\n\n  Scenario: Scenario feature 2\n\n    Given scenario step"
            }
          },
          {
            "result": {
              "duration": 8321655,
              "status": "passed"
            },
            "line": 79,
            "name": "I convert them using comment order",
            "match": {
              "location": "OrderingSteps.I_convert_them__using_comment_order()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 96521,
              "status": "passed"
            },
            "comments": [
              {
                "line": 81,
                "value": "# cukedoctor-discrete"
              }
            ],
            "line": 82,
            "name": "Features should be ordered respecting order comment",
            "match": {
              "location": "OrderingSteps.Features_should_be_ordered_respecting_order_comment(String)"
            },
            "keyword": "Then ",
            "doc_string": {
              "content_type": "",
              "line": 83,
              "value": "[[Feature2, Feature2]]\n\u003d\u003d\u003d *Feature2*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 2\n\n****\nGiven ::\n\u003d\u003d\u003d\u003d\u003d\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(000ms)#\n\u003d\u003d\u003d\u003d\u003d\n****\n\n[[Feature1, Feature1]]\n\u003d\u003d\u003d *Feature1*\n\n\u003d\u003d\u003d\u003d Scenario: Scenario feature 1\n\n****\nGiven ::\n\u003d\u003d\u003d\u003d\u003d\nscenario step icon:thumbs-up[role\u003d\"green\",title\u003d\"Passed\"] [small right]#(313ms)#\n\u003d\u003d\u003d\u003d\u003d\n****\n\n"
            }
          }
        ]
      }
    ],
    "name": "Ordering",
    "description": "\u003d\u003d\u003d\u003d\n[quote]\n____\nIn order to have features ordered in living documentation\nAs a bdd developer\nI want to control the order of features in my documentation\n____\n\u003d\u003d\u003d\u003d",
    "id": "ordering",
    "keyword": "Feature",
    "uri": "com/github/cukedoctor/bdd/cukedoctor/ordering.feature"
  }
]